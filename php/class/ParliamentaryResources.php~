<?php
/**
 *
 * Pass a comma-separated list of search words as a comma separated list : monkey,butler
 *
 *
 * It'll do a title and summary fulltext search first, then
 * a LIKE() search if the first one doesn't give anything.
 *
 */

 






class ParliamentaryResources {


	/**
	 * Database connection
	 */
	protected $_conn;

	/**
	 * Paramaters to search for, once they've been escaped etc.
	 * @var array
	 */
	protected $_params;

	/**
	 * Paging for the query 
	 */
	protected $_offset = 0;
	protected $_limit = 20;

	/**
	 * Constructor
	 * @param String	Comma-separated list of search terms you'll want to search for
	 *
	 */
	public function __construct ($searchTerms) {

		$this->_setDb();
		$this->setSearchTerms($searchTerms);

	}


	/**
	 * Sets up the db connection
	 */
	protected function _setDb () {

		// Globals set by require'd file
		$rs = mysql_connect(PARLY_SERVER, PARLY_USER, PARLY_PASSWORD) or die("Could not connect to database");

		mysql_select_db(PARLY_DB) or die(mysql_error());
		$this->_conn = $rs;

	}


	/**
	 * Cleans up the search terms 
	 * @param String
	 * @return ParliamentaryResources
	 */
	public function setSearchTerms ($searchTerms) {

		$conn = $this->_conn;
	

		if (strstr($searchTerms, ',')) {
			$dirtyParams = explode(',', $searchTerms);
		} else {
			$dirtyParams = array($searchTerms);
		}

		$cleanParams = array();
		foreach ($dirtyParams as $p) {
			$cleanParams[] = mysql_real_escape_string($p, $conn);
		}

		$this->_params = $cleanParams;

		return $this;

	}


	/**
	 * Gets the search terms as an array of cleaned up text
	 * @return Array
	 */
	public function getSearchTerms () {
		return $this->_params;
	}


	/**
	 * Builds an sql to do a LIKE query if the fulltext fails
	 * @return String
	 */
	protected function _buildLikeSql () {
		
		$params = $this->_params;

		// Build the query

		$match = '';

		if ($params && count($params) > 0) {
			$match = ' title LIKE ("%' 
				. implode($params, '%") OR title LIKE("%')
				. '%") '
				. ' OR summary LIKE ("%' 
				. implode($params, '%") OR summary LIKE("%')
				. '%") ';
		}

		$query = "SELECT * ";

		$query .= " FROM Bills ";

		if ($match != '') {
			$query .= " WHERE " . $match;
		}

		$query .= " LIMIT " . $this->_offset . " , " . $this->_limit;

		return $query;

	}


	/**
	 * Builds the sql statement
	 * @return String
	 */
	protected function _buildFulltextSql () {

		$params = $this->_params;

		// Build the query

		$match = '';

		if ($params && count($params) > 0) {
			$match = " MATCH (title, summary) AGAINST "
				. "('" . implode($params, ' ') . "' IN BOOLEAN MODE) ";
		}

		$query = "SELECT * ";
	        if ($match != '') {
			$query .= ", " . $match . " as matchscore";
		}
		$query .= " FROM Bills ";

		if ($match != '') {
			$query .= " WHERE " . $match;
		}

		if ($match != '') {
			$query .= " ORDER BY matchscore DESC ";
		}

		$query .= " LIMIT " . $this->_offset . " , " . $this->_limit;

		return $query;

	}

	/**
	 * Searches the database
	 * @return Array | false
	 */
	public function search ($type = 'fulltext') {

		switch ($type) {

		case 'like':
			$sql = $this->_buildLikeSql();
			break;

		case 'fulltext':
		default:
			$sql = $this->_buildFulltextSql();

		}

		$rs = mysql_query($sql, $this->_conn) or die("Query problem " . mysql_error());
		$ret = array();

		if (mysql_num_rows($rs) == 0) {
			if ($type == 'fulltext') {
				return $this->search('like');
			}
			return false;
		}

		while ($row = mysql_fetch_assoc($rs)) {
			$ret[] = $row;
		}
		
		return $ret;

	}

}










